{"version":3,"sources":["helpers/api.ts","components/User.tsx","components/Comment.tsx","components/CommentList.tsx","store/posts.ts","components/Post.tsx","store/loading.ts","store/query.ts","store/index.ts","components/PostList.tsx","App.tsx","index.tsx"],"names":["getAll","url","fetch","then","response","json","getPostsFromServer","a","Promise","all","postsFromServer","usersFromServer","commentsFromServer","map","post","user","find","id","userId","comments","filter","comment","postId","User","className","name","email","address","street","suite","city","zipcode","Comment","body","CommentList","key","postsReducer","posts","action","type","value","Post","dispatch","useDispatch","title","onClick","loadingReducer","loading","queryReducer","query","isLoading","state","getPosts","getQuery","rootReducer","combineReducers","store","createStore","composeWithDevTools","PostList","useSelector","useState","filterQuery","setfilterQuery","vissiblePosts","useMemo","allPosts","searchQuery","pattern","RegExp","test","getVisiblePosts","setfilterQueryWithDebonce","useCallback","debounce","htmlFor","placeholder","onChange","event","setQuery","target","App","length","finishLoading","disabled","Root","ReactDOM","render","document","getElementById"],"mappings":"iTAEMA,EAAS,SAAIC,GACjB,OAAOC,MAHO,iEAGSD,GACpBE,MAAK,SAAAC,GAAQ,OAAIA,EAASC,WASlBC,EAAkB,uCAAG,oCAAAC,EAAA,sEAKtBC,QAAQC,IAAI,CAXGT,EAAc,eAEdA,EAAc,eAEXA,EAAiB,oBAEb,0CAE9BU,EAF8B,KAG9BC,EAH8B,KAI9BC,EAJ8B,uBAOzBF,EAAgBG,KAAI,SAACC,GAAD,mBAAC,eACvBA,GADsB,IAEzBC,KAAMJ,EAAgBK,MAAK,SAACD,GAAD,OAAUA,EAAKE,KAAOH,EAAKI,UACtDC,SAAUP,EAAmBQ,QAAO,SAACC,GAAD,OAAaA,EAAQC,SAAWR,EAAKG,YAV3C,2CAAH,qD,iBCwBhBM,EA/Be,SAAC,GAAD,IAAGR,EAAH,EAAGA,KAAH,OAC5B,yBAAKS,UAAU,oBACb,yBAAKA,UAAU,cACb,2BACGT,EAAKU,MAER,2BACGV,EAAKW,QAGV,yBAAKF,UAAU,gBACb,0CAEGT,EAAKY,QAAQC,QAEhB,yCAEGb,EAAKY,QAAQE,OAEhB,wCAEGd,EAAKY,QAAQG,MAEhB,2CAEGf,EAAKY,QAAQI,YChBPC,EATkB,SAAC,GAAD,IAAGX,EAAH,EAAGA,QAAH,OAC/B,4BACE,6BACA,wBAAIG,UAAU,kBAAkBH,EAAQI,MACxC,uBAAGD,UAAU,kBAAkBH,EAAQY,MACvC,uBAAGT,UAAU,mBAAmBH,EAAQK,SCM7BQ,EAVsB,SAAC,GAAD,IAAGf,EAAH,EAAGA,SAAH,OACnC,wBAAIK,UAAU,4BACZ,6BACA,yCACCL,EAASN,KAAI,SAAAQ,GAAO,OACnB,kBAAC,EAAD,CAASA,QAASA,EAASc,IAAKd,EAAQJ,UCQ/BmB,EAbM,WAAoE,IAAnEC,EAAkE,uDAA1C,GAAIC,EAAsC,uCACtF,OAAQA,EAAOC,MACb,IANmB,iBAOjB,OAAOD,EAAOD,MAEhB,IAVgB,cAWd,OAAOA,EAAMjB,QAAO,SAAAN,GAAI,OAAIA,EAAKG,KAAOqB,EAAOE,SAEjD,QACE,OAAOH,ICwBEI,EA5Be,SAAC,GAAc,IAAZ3B,EAAW,EAAXA,KACzB4B,EAAWC,cAMjB,OACE,wBAAInB,UAAU,eACZ,6BACE,wBAAIA,UAAU,gBAAgBV,EAAK8B,OACnC,uBAAGpB,UAAU,eACVV,EAAKmB,OAGV,kBAAC,EAAD,CAAMlB,KAAMD,EAAKC,OACjB,kBAAC,EAAD,CAAaI,SAAUL,EAAKK,WAC5B,4BACEoB,KAAK,SACLf,UAAU,gBACVqB,QAAS,kBAjBa5B,EAiBYH,EAAKG,QAhB3CyB,EDX0C,CAACH,KAH3B,cAG8CC,MCW1CvB,IADK,IAACA,IAcxB,Y,eCRS6B,EAbQ,WAAkD,IAAjDC,EAAgD,wDAA/BT,EAA+B,uCACtE,OAAQA,EAAOC,MACb,IARkB,gBAShB,OAAO,EAET,IAVmB,iBAWjB,OAAO,EAET,QACE,OAAOQ,ICEEC,EAVM,WAAoC,IAAnCC,EAAkC,uDAA1B,GAAIX,EAAsB,uCACtD,OAAQA,EAAOC,MACb,IATc,YAUZ,OAAOD,EAAOW,MAEhB,QACE,OAAOA,ICPAC,EAAY,SAACC,GAAD,OAAsBA,EAAMJ,SACxCK,EAAW,SAACD,GAAD,OAAsBA,EAAMd,OACvCgB,EAAW,SAACF,GAAD,OAAsBA,EAAMF,OAK9CK,EAAcC,0BAAgB,CAClCR,QAASD,EACTT,MAAOD,EACPa,MAAOD,IAWMQ,EALDC,sBACZH,EACAI,iCCmCaC,EApDY,WACzB,IAAMjB,EAAWC,cACXN,EAAQuB,YAAYR,GACpBH,EAAQW,YAAYP,GAHK,EAIOQ,mBAAS,IAJhB,mBAIxBC,EAJwB,KAIXC,EAJW,KAazBC,EAAgBC,mBACpB,kBAPsB,SAACC,EAA0BC,GACjD,IAAMC,EAAU,IAAIC,OAAOF,EAAa,KAExC,OAAOD,EAAS9C,QAAO,gBAAGa,EAAH,EAAGA,KAAMW,EAAT,EAASA,MAAT,OAAqBwB,EAAQE,KAAKrC,EAAOW,MAI1D2B,CAAgBlC,EAAOyB,KAE7B,CAACA,EAAazB,IAGVmC,EAA4BC,sBAChCC,IAASX,EAAgB,KACzB,IAQF,OACE,oCACE,2BAAOY,QAAQ,SAASnD,UAAU,gBAAlC,iBAGA,2BACEe,KAAK,OACLtB,GAAG,SACHO,UAAU,gBACVoD,YAAY,gBACZpC,MAAOS,EACP4B,SAhBe,SAACC,GACpBpC,EF9BoB,SAACO,GAAD,MAAoB,CAC1CV,KAHgB,YAIhBU,SE4BW8B,CAASD,EAAME,OAAOxC,QAC/BgC,EAA0BM,EAAME,OAAOxC,UAiBrC,wBAAIhB,UAAU,SACXwC,EAAcnD,KAAI,SAAAC,GAAI,OACrB,kBAAC,EAAD,CAAMA,KAAMA,EAAMqB,IAAKrB,EAAKG,WCbvBgE,EA9BH,WACV,IAAMlC,EAAUa,YAAYV,GACtBb,EAAQuB,YAAYR,GACpBV,EAAWC,cAWjB,OACE,oCACE,yBAAKnB,UAAU,OACb,qDACkB,IAAjBa,EAAM6C,OACL,4BAAQ3C,KAAK,SAASM,QAdN,WACtBH,EJZ+B,CAAEH,KAHf,kBIiBlBjC,IACGH,MACC,SAAAO,GAAe,OAAIgC,EJfE,SAACL,GAAD,MAA4B,CAAEE,KAHpC,iBAG0DF,SIe7C8C,CAAczE,QASQ0E,SAAUrC,GACvDA,EAAU,UAAY,QAGvB,kBAAC,EAAD,SC1BNsC,EAAO,kBACX,kBAAC,IAAD,CAAU7B,MAAOA,GACf,kBAAC,IAAD,KACE,kBAAC,EAAD,SAKN8B,IAASC,OAAO,kBAAC,EAAD,MAAUC,SAASC,eAAe,W","file":"static/js/main.3319274a.chunk.js","sourcesContent":["const API_URL = 'https://mate-academy.github.io/react_dynamic-list-of-posts/api';\n\nconst getAll = <T>(url: string): Promise<T[]> => {\n  return fetch(API_URL + url)\n    .then(response => response.json());\n}\n\nexport const posts = () => getAll<Posts>('/posts.json');\n\nexport const users = () => getAll<Users>('/users.json');\n\nexport const comments = () => getAll<Comments>('/comments.json');\n\nexport const getPostsFromServer = async (): Promise<PostWithUser[]> => {\n  const [\n    postsFromServer,\n    usersFromServer,\n    commentsFromServer,\n  ] = await Promise.all([posts(), users(), comments()]);\n\n  return postsFromServer.map((post) => ({\n    ...post,\n    user: usersFromServer.find((user) => user.id === post.userId) as Users,\n    comments: commentsFromServer.filter((comment) => comment.postId === post.id),\n}));\n};\n\n","import React from 'react';\n\ntype Props = {\n  user: Users;\n}\n\nconst User: React.FC<Props> = ({ user }) => (\n  <div className=\"posts__user user\">\n    <div className=\"user__name\">\n      <p>\n        {user.name}\n      </p>\n      <p>\n        {user.email}\n      </p>\n    </div>\n    <div className=\"user__adress\">\n      <p>\n        Street: &nbsp;\n        {user.address.street}\n      </p>\n      <p>\n        Suite: &nbsp;\n        {user.address.suite}\n      </p>\n      <p>\n        City: &nbsp;\n        {user.address.city}\n      </p>\n      <p>\n        Zipcode: &nbsp;\n        {user.address.zipcode}\n      </p>\n    </div>\n  </div>\n);\n\nexport default User;\n","import React from 'react';\n\ntype Props = {\n  comment: Comments;\n}\n\nconst Comment: React.FC<Props> = ({ comment }) => (\n  <li>\n    <hr />\n    <h4 className=\"comments__name\">{comment.name}</h4>\n    <p className=\"comments__text\">{comment.body}</p>\n    <p className=\"comments__email\">{comment.email}</p>\n  </li>\n);\n\nexport default Comment;\n","import React from 'react';\nimport Comment from './Comment';\n\ntype Props = {\n  comments: Comments[];\n}\n\nconst CommentList: React.FC<Props> = ({ comments }) => (\n  <ul className=\"posts__comments comments\">\n    <hr />\n    <h3>Comments:</h3>\n    {comments.map(comment => (\n      <Comment comment={comment} key={comment.id} />\n    ))}\n  </ul>\n);\n\nexport default CommentList;\n","import { AnyAction } from 'redux';\n\nconst DELETE_POST = 'DELETE_POST';\nconst FINISH_LOADING = 'FINISH_LOADING';\n\nexport const deletePost = (value: number) => ({type: DELETE_POST, value});\n\nconst postsReducer = (posts: PostWithUser[] = [], action: AnyAction): PostWithUser[] => {\n  switch (action.type) {\n    case FINISH_LOADING:\n      return action.posts;\n\n    case DELETE_POST:\n      return posts.filter(post => post.id !== action.value);\n\n    default:\n      return posts;\n  }\n};\n\nexport default postsReducer;\n","import React from 'react';\nimport { useDispatch } from 'react-redux';\n\nimport User from './User';\nimport CommentList from './CommentList';\n\nimport { deletePost } from '../store/posts';\n\ntype Props = {\n  post: PostWithUser;\n}\n\nconst Post: React.FC<Props> = ({ post }) => {\n  const dispatch = useDispatch();\n\n  const deleteSelectedPost = (id: number) => {\n    dispatch(deletePost(id))\n  }\n\n  return (\n    <li className=\"posts__item\">\n      <div>\n        <h3 className=\"posts__title\">{post.title}</h3>\n        <p className=\"posts__text\">\n          {post.body}\n        </p>\n      </div>\n      <User user={post.user} />\n      <CommentList comments={post.comments} />\n      <button\n        type=\"button\"\n        className=\"delete-button\"\n        onClick={() => deleteSelectedPost(post.id)}\n      >\n        Delete\n    </button>\n    </li>\n  );\n}\n\nexport default Post;\n","import { AnyAction } from 'redux';\n\nconst START_LOADING = 'START_LOADING';\nconst FINISH_LOADING = 'FINISH_LOADING';\n\nexport const startLoading = () => ({ type: START_LOADING });\nexport const finishLoading = (posts: PostWithUser[]) => ({ type: FINISH_LOADING, posts });\n\nconst loadingReducer = (loading = false, action: AnyAction): boolean => {\n  switch (action.type) {\n    case START_LOADING:\n      return true;\n\n    case FINISH_LOADING:\n      return false;\n\n    default:\n      return loading;\n  }\n};\n\nexport default loadingReducer;\n","import { AnyAction } from 'redux';\n\nconst SET_QUERY = 'SET_QUERY';\n\nexport const setQuery = (query: string) => ({\n  type: SET_QUERY,\n  query,\n})\n\nconst queryReducer = (query = '', action: AnyAction) => {\n  switch (action.type) {\n    case SET_QUERY:\n      return action.query;\n\n    default:\n      return query;\n  }\n}\n\nexport default queryReducer;\n","import { createStore, combineReducers } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\n\nimport loadingReducer from './loading';\nimport postsReducer from './posts';\nimport queryReducer from './query';\n\n// Selectors - a function receiving Redux state and returning some data from it\nexport const isLoading = (state: RootState) => state.loading;\nexport const getPosts = (state: RootState) => state.posts;\nexport const getQuery = (state: RootState) => state.query;\n\n//Initial state\n\n// rootReducer - this function is called after dispatching an action\nconst rootReducer = combineReducers({\n  loading: loadingReducer,\n  posts: postsReducer,\n  query: queryReducer,\n})\n\nexport type RootState = ReturnType<typeof rootReducer>;\n\n// The `store` should be passed to the <Provider store={store}> in `/src/index.tsx`\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools() // allows you to use http://extension.remotedev.io/\n);\n\nexport default store;\n","import React, { useCallback, useMemo, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport debounce from 'lodash/debounce';\n\nimport Post from './Post';\n\nimport {getPosts, getQuery} from '../store';\nimport {setQuery} from '../store/query';\n\nconst PostList: React.FC = () => {\n  const dispatch = useDispatch();\n  const posts = useSelector(getPosts);\n  const query = useSelector(getQuery);\n  const [filterQuery, setfilterQuery] = useState('');\n\n\n  const getVisiblePosts = (allPosts: PostWithUser[], searchQuery: string) => {\n    const pattern = new RegExp(searchQuery, 'i');\n\n    return allPosts.filter(({ body, title }) => pattern.test(body + title))\n  }\n\n  const vissiblePosts = useMemo(\n    () => getVisiblePosts(posts, filterQuery),\n\n    [filterQuery, posts]\n  );\n\n  const setfilterQueryWithDebonce = useCallback(\n    debounce(setfilterQuery, 1000),\n    []\n  );\n\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    dispatch(setQuery(event.target.value));\n    setfilterQueryWithDebonce(event.target.value)\n  }\n\n  return (\n    <>\n      <label htmlFor=\"filter\" className=\"filter__text\">\n        Filter posts:\n          </label>\n      <input\n        type=\"text\"\n        id=\"filter\"\n        className=\"filter__field\"\n        placeholder=\"enter word...\"\n        value={query}\n        onChange={handleChange}\n      />\n\n      <ul className=\"posts\">\n        {vissiblePosts.map(post => (\n          <Post post={post} key={post.id} />\n        ))}\n      </ul>\n    </>\n  )\n}\n\nexport default PostList;\n\n","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport './App.scss';\n\nimport { getPostsFromServer } from './helpers/api';\nimport PostList from './components/PostList';\n\nimport { isLoading, getPosts } from './store';\nimport { finishLoading, startLoading } from './store/loading';\n\nconst App = () => {\n  const loading = useSelector(isLoading);\n  const posts = useSelector(getPosts);\n  const dispatch = useDispatch();\n\n  const handleLoadClick = () => {\n    dispatch(startLoading());\n\n    getPostsFromServer()\n      .then(\n        postsFromServer => dispatch(finishLoading(postsFromServer))\n      );\n  };\n\n  return (\n    <>\n      <div className=\"App\">\n        <h1>Dynamic list of posts</h1>\n        {posts.length === 0 ? (\n          <button type=\"button\" onClick={handleLoadClick} disabled={loading}>\n            {loading ? 'Loading' : 'Load'}\n          </button>\n        ) : (\n            <PostList />\n          )}\n      </div>\n    </>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter } from 'react-router-dom';\n\nimport App from './App';\nimport store from './store';\n\nconst Root = () => (\n  <Provider store={store}>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}